//
// cc sdl-metal-example.m `sdl2-config --cflags --libs` -framework Metal -framework QuartzCore && ./a.out
//

#include <stdint.h>

// generated using the "blocks.png", and this url:    https://notisrac.github.io/FileToCArray/
static const uint32_t atlas[64 * 64] = { 

  0x9c5a3c, 0xc48037, 0xe5aa7a, 0xc48037, 0xc48037, 0x9c5a3c, 0xc48037, 0x9c5b4e, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x315c2e, 0x2b694c, 0x408c3b, 0x408c3b, 0x6f8f44, 0x408c3b, 0x2b694c, 0x315c2e, 0x408c3b, 0x408c3b, 0x2b694c, 0x6f8f44, 0x787878, 0xa1a1a1, 0x878787, 0xa1a1a1, 0xa1a1a1, 0x8f8f8f, 0x706f70, 0x878787, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0xa1a1a1, 0x75412a, 0x795548, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x824328, 0xd3f9bc, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x22b14c, 0xed1c24, 0xa8e61d, 0xd3f9bc, 0x40c4ff, 0x0091ea, 0x039be5, 0x0091ea, 0x00b7ef, 0x1e88e5, 0x29b6f6, 0x0091ea, 
  0xc48037, 0x9c5a3c, 0x61372e, 0x9c5a3c, 0x9c5a3c, 0xc48037, 0x61372e, 0x9c5b4e, 0x89c93a, 0x315c2e, 0x408c3b, 0x6f8f44, 0x2b694c, 0x408c3b, 0x89c93a, 0x408c3b, 0x408c3b, 0x315c2e, 0x408c3b, 0x408c3b, 0x89c93a, 0x408c3b, 0x408c3b, 0x408c3b, 0x8f8f8f, 0x878787, 0x706f70, 0x878787, 0x8f8f8f, 0xa1a1a1, 0x878787, 0x8f8f8f, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0xa1a1a1, 0x787878, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0x75412a, 0x8d5524, 0x824328, 0x75412a, 0x824328, 0x824328, 0x824328, 0x9c5b4e, 0xed1c24, 0xa8e61d, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0xa8e61d, 0x22b14c, 0xa8e61d, 0x1e88e5, 0x29b6f6, 0x03a9f4, 0x29b6f6, 0x1e88e5, 0x03a9f4, 0x40c4ff, 0x00b7ef, 
  0x9c5b4e, 0xc48037, 0x9c5a3c, 0xc48037, 0xe5aa7a, 0xc48037, 0x9c5b4e, 0xc48037, 0x408c3b, 0xc48037, 0x89c93a, 0x2b694c, 0xe5aa7a, 0x408c3b, 0x9c5b4e, 0x2b694c, 0x408c3b, 0x408c3b, 0x6f8f44, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x89c93a, 0x8f8f8f, 0x706f70, 0x878787, 0xa1a1a1, 0x878787, 0x878787, 0x8f8f8f, 0x787878, 0xa1a1a1, 0x787878, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0x75412a, 0x9c5a3c, 0x75412a, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x75412a, 0xd3f9bc, 0xa8e61d, 0x22b14c, 0xa8e61d, 0xd3f9bc, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x29b6f6, 0x40c4ff, 0x1e88e5, 0x0277bd, 0x039be5, 0x00b7ef, 0x1e88e5, 0x039be5, 
  0xe5aa7a, 0x9c5a3c, 0xc48037, 0xc48037, 0x9c5b4e, 0x9c5a3c, 0xc48037, 0xc48037, 0xe5aa7a, 0x9c5a3c, 0x408c3b, 0xc48037, 0x9c5b4e, 0x9c5a3c, 0xc48037, 0xc48037, 0x315c2e, 0x408c3b, 0x315c2e, 0x408c3b, 0x315c2e, 0x408c3b, 0x408c3b, 0x408c3b, 0xa1a1a1, 0x8f8f8f, 0x878787, 0x706f70, 0x8f8f8f, 0x8f8f8f, 0x878787, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x9c5a3c, 0x75412a, 0x824328, 0x75412a, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0xed1c24, 0xa8e61d, 0xa8e61d, 0xa8e61d, 0x22b14c, 0x03a9f4, 0x039be5, 0x29b6f6, 0x00b7ef, 0x1e88e5, 0x0091ea, 0x0277bd, 0x1e88e5, 
  0xc48037, 0x9c5b4e, 0xe5aa7a, 0x9c5a3c, 0xc48037, 0x61372e, 0xc48037, 0x9c5a3c, 0xc48037, 0x9c5b4e, 0xe5aa7a, 0x9c5a3c, 0xc48037, 0x61372e, 0xc48037, 0x9c5a3c, 0x408c3b, 0x6f8f44, 0x408c3b, 0x6f8f44, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x878787, 0xa1a1a1, 0x8f8f8f, 0x828182, 0x878787, 0xa1a1a1, 0x8f8f8f, 0x8f8f8f, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x9c5a3c, 0x75412a, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x22b14c, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0xed1c24, 0x1e88e5, 0x039be5, 0x03a9f4, 0x1e88e5, 0x1e88e5, 0x039be5, 0x00b7ef, 0x0091ea, 
  0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x408c3b, 0x408c3b, 0x408c3b, 0x315c2e, 0x408c3b, 0x6f8f44, 0x408c3b, 0x315c2e, 0xa1a1a1, 0x878787, 0x706f70, 0x8f8f8f, 0xa1a1a1, 0x706f70, 0x878787, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0x787878, 0x75412a, 0x9c5b4e, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x75412a, 0xa8e61d, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0x22b14c, 0xa8e61d, 0x22b14c, 0xa8e61d, 0x1e88e5, 0x40c4ff, 0x1e88e5, 0x039be5, 0x03a9f4, 0x1e88e5, 0x03a9f4, 0x40c4ff, 
  0xc48037, 0x61372e, 0xe5aa7a, 0xc48037, 0x9c5b4e, 0xe5aa7a, 0x61372e, 0x9c5b4e, 0xc48037, 0x61372e, 0xe5aa7a, 0xc48037, 0x9c5b4e, 0xe5aa7a, 0x61372e, 0x9c5b4e, 0x408c3b, 0x89c93a, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x315c2e, 0x408c3b, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x878787, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x8f8f8f, 0xd4d4d4, 0xffffff, 0xa1a1a1, 0xd4d4d4, 0xa1a1a1, 0x787878, 0xd4d4d4, 0xd4d4d4, 0x824328, 0x9c5b4e, 0x824328, 0x75412a, 0x9c5a3c, 0x8d5524, 0x824328, 0x75412a, 0x22b14c, 0xed1c24, 0xa8e61d, 0x22b14c, 0xa8e61d, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0x29b6f6, 0x40c4ff, 0x03a9f4, 0x0091ea, 0x0277bd, 0x00b7ef, 0x1e88e5, 0x039be5, 
  0x9c5b4e, 0xc48037, 0x9c5b4e, 0x9c5b4e, 0x61372e, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0x9c5b4e, 0x61372e, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0x315c2e, 0x408c3b, 0x6f8f44, 0x408c3b, 0x408c3b, 0x315c2e, 0x89c93a, 0x408c3b, 0x878787, 0xa1a1a1, 0x878787, 0x878787, 0x878787, 0x787878, 0x8f8f8f, 0xa1a1a1, 0xffffff, 0xd4d4d4, 0x787878, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xa1a1a1, 0x75412a, 0x824328, 0x824328, 0x823737, 0x824328, 0x824328, 0x824328, 0x824328, 0xa8e61d, 0x22b14c, 0xd3f9bc, 0xa8e61d, 0xed1c24, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x1e88e5, 0x0091ea, 0x00b7ef, 0x0091ea, 0x29b6f6, 0x0091ea, 0x2196f3, 0x0091ea, 
  0x75412a, 0x75412a, 0x824328, 0x75412a, 0x75412a, 0x795548, 0x75412a, 0x75412a, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0x9c5a3c, 0xc48037, 0xe5aa7a, 0xc48037, 0xc48037, 0x9c5a3c, 0x9c5a3c, 0x9c5b4e, 0x787878, 0xa1a1a1, 0x878787, 0xa1a1a1, 0xa1a1a1, 0x8f8f8f, 0x706f70, 0x878787, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x607d8b, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x607d8b, 
  0x75412a, 0xffc107, 0xffc107, 0xe0ac69, 0xffad60, 0xffcd94, 0xffc107, 0x75412a, 0xa1a1a1, 0x000000, 0x000000, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x315c2e, 0x9c5a3c, 0x61372e, 0x89c93a, 0x408c3b, 0xc48037, 0x61372e, 0x9c5b4e, 0x8f8f8f, 0x878787, 0xe0ac69, 0x878787, 0x8f8f8f, 0xa1a1a1, 0xffdbac, 0x8f8f8f, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x795548, 0xffc107, 0xb37334, 0xc68642, 0xc68642, 0xb37334, 0xff9800, 0x9c5b4e, 0xa1a1a1, 0x000000, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x9c5b4e, 0x408c3b, 0x9c5a3c, 0x315c2e, 0x9c5a3c, 0x89c93a, 0x9c5b4e, 0xc48037, 0x8f8f8f, 0x706f70, 0x878787, 0xa1a1a1, 0xffc107, 0x878787, 0x8f8f8f, 0x787878, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x5c5c5c, 0x5c5c5c, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x4dd0e1, 0x18ffff, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x75412a, 0xff9800, 0xc68642, 0xffad60, 0xffad60, 0xc68642, 0xe0ac69, 0x795548, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0xe5aa7a, 0x9c5a3c, 0x89c93a, 0x6f8f44, 0x315c2e, 0x408c3b, 0xc48037, 0x408c3b, 0xa1a1a1, 0x8f8f8f, 0x878787, 0xc68642, 0x878787, 0x8f8f8f, 0x878787, 0xa1a1a1, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x4f4f4f, 0x5c5c5c, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x00e5ff, 0x18ffff, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x5c5c5c, 0x4f4f4f, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x18ffff, 0x00e5ff, 0x607d8b, 0x828182, 0x607d8b, 
  0x9c5b4e, 0xff9800, 0xc68642, 0xe0ac69, 0xffcd94, 0xc68642, 0xff9800, 0x75412a, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0xc48037, 0x9c5b4e, 0x408c3b, 0x9c5a3c, 0x89c93a, 0x61372e, 0xc48037, 0x9c5a3c, 0x878787, 0xe0ac69, 0x878787, 0x878787, 0x878787, 0xffe0bd, 0x8f8f8f, 0x8f8f8f, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x5c5c5c, 0x4f4f4f, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x18ffff, 0x00e5ff, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x4f4f4f, 0x5c5c5c, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x00e5ff, 0x18ffff, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x795548, 0xffc107, 0xffc107, 0xc68642, 0xc68642, 0xb37334, 0xff9800, 0x9c5b4e, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x000000, 0xa1a1a1, 0x9c5b4e, 0x408c3b, 0x9c5a3c, 0x315c2e, 0x408c3b, 0x315c2e, 0x9c5b4e, 0xc48037, 0xa1a1a1, 0x878787, 0x706f70, 0x8f8f8f, 0xffdbac, 0x706f70, 0x878787, 0xa1a1a1, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x5c5c5c, 0x4f4f4f, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x18ffff, 0x4dd0e1, 0x607d8b, 0x828182, 0x607d8b, 
  0x75412a, 0xff9800, 0xffc107, 0xff9800, 0xff9800, 0xff9800, 0xffc107, 0x824328, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x000000, 0x000000, 0xa1a1a1, 0xc48037, 0x61372e, 0xe5aa7a, 0xc48037, 0x9c5a3c, 0xe5aa7a, 0x408c3b, 0x9c5b4e, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x878787, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x8f8f8f, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x9c5b4e, 0x75412a, 0x75412a, 0x75412a, 0x75412a, 0x9c5b4e, 0x75412a, 0x75412a, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0x9c5b4e, 0x9c5a3c, 0x9c5b4e, 0x9c5a3c, 0x61372e, 0x9c5b4e, 0xc48037, 0x315c2e, 0x878787, 0xa1a1a1, 0x878787, 0x878787, 0x878787, 0x787878, 0x8f8f8f, 0xa1a1a1, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x607d8b, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x607d8b, 




  0x9c5a3c, 0xc48037, 0xe5aa7a, 0xc48037, 0xc48037, 0x9c5a3c, 0xc48037, 0x9c5b4e, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x315c2e, 0x2b694c, 0x408c3b, 0x408c3b, 0x6f8f44, 0x408c3b, 0x2b694c, 0x315c2e, 0x408c3b, 0x408c3b, 0x2b694c, 0x6f8f44, 0x787878, 0xa1a1a1, 0x878787, 0xa1a1a1, 0xa1a1a1, 0x8f8f8f, 0x706f70, 0x878787, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0xa1a1a1, 0x75412a, 0x795548, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x824328, 0xd3f9bc, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x22b14c, 0xed1c24, 0xa8e61d, 0xd3f9bc, 0x40c4ff, 0x0091ea, 0x039be5, 0x0091ea, 0x00b7ef, 0x1e88e5, 0x29b6f6, 0x0091ea, 
  0xc48037, 0x9c5a3c, 0x61372e, 0x9c5a3c, 0x9c5a3c, 0xc48037, 0x61372e, 0x9c5b4e, 0x89c93a, 0x315c2e, 0x408c3b, 0x6f8f44, 0x2b694c, 0x408c3b, 0x89c93a, 0x408c3b, 0x408c3b, 0x315c2e, 0x408c3b, 0x408c3b, 0x89c93a, 0x408c3b, 0x408c3b, 0x408c3b, 0x8f8f8f, 0x878787, 0x706f70, 0x878787, 0x8f8f8f, 0xa1a1a1, 0x878787, 0x8f8f8f, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0xa1a1a1, 0x787878, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0x75412a, 0x8d5524, 0x824328, 0x75412a, 0x824328, 0x824328, 0x824328, 0x9c5b4e, 0xed1c24, 0xa8e61d, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0xa8e61d, 0x22b14c, 0xa8e61d, 0x1e88e5, 0x29b6f6, 0x03a9f4, 0x29b6f6, 0x1e88e5, 0x03a9f4, 0x40c4ff, 0x00b7ef, 
  0x9c5b4e, 0xc48037, 0x9c5a3c, 0xc48037, 0xe5aa7a, 0xc48037, 0x9c5b4e, 0xc48037, 0x408c3b, 0xc48037, 0x89c93a, 0x2b694c, 0xe5aa7a, 0x408c3b, 0x9c5b4e, 0x2b694c, 0x408c3b, 0x408c3b, 0x6f8f44, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x89c93a, 0x8f8f8f, 0x706f70, 0x878787, 0xa1a1a1, 0x878787, 0x878787, 0x8f8f8f, 0x787878, 0xa1a1a1, 0x787878, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0x75412a, 0x9c5a3c, 0x75412a, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x75412a, 0xd3f9bc, 0xa8e61d, 0x22b14c, 0xa8e61d, 0xd3f9bc, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x29b6f6, 0x40c4ff, 0x1e88e5, 0x0277bd, 0x039be5, 0x00b7ef, 0x1e88e5, 0x039be5, 
  0xe5aa7a, 0x9c5a3c, 0xc48037, 0xc48037, 0x9c5b4e, 0x9c5a3c, 0xc48037, 0xc48037, 0xe5aa7a, 0x9c5a3c, 0x408c3b, 0xc48037, 0x9c5b4e, 0x9c5a3c, 0xc48037, 0xc48037, 0x315c2e, 0x408c3b, 0x315c2e, 0x408c3b, 0x315c2e, 0x408c3b, 0x408c3b, 0x408c3b, 0xa1a1a1, 0x8f8f8f, 0x878787, 0x706f70, 0x8f8f8f, 0x8f8f8f, 0x878787, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x9c5a3c, 0x75412a, 0x824328, 0x75412a, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0xed1c24, 0xa8e61d, 0xa8e61d, 0xa8e61d, 0x22b14c, 0x03a9f4, 0x039be5, 0x29b6f6, 0x00b7ef, 0x1e88e5, 0x0091ea, 0x0277bd, 0x1e88e5, 
  0xc48037, 0x9c5b4e, 0xe5aa7a, 0x9c5a3c, 0xc48037, 0x61372e, 0xc48037, 0x9c5a3c, 0xc48037, 0x9c5b4e, 0xe5aa7a, 0x9c5a3c, 0xc48037, 0x61372e, 0xc48037, 0x9c5a3c, 0x408c3b, 0x6f8f44, 0x408c3b, 0x6f8f44, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x878787, 0xa1a1a1, 0x8f8f8f, 0x828182, 0x878787, 0xa1a1a1, 0x8f8f8f, 0x8f8f8f, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x9c5a3c, 0x75412a, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x22b14c, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0xed1c24, 0x1e88e5, 0x039be5, 0x03a9f4, 0x1e88e5, 0x1e88e5, 0x039be5, 0x00b7ef, 0x0091ea, 
  0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x408c3b, 0x408c3b, 0x408c3b, 0x315c2e, 0x408c3b, 0x6f8f44, 0x408c3b, 0x315c2e, 0xa1a1a1, 0x878787, 0x706f70, 0x8f8f8f, 0xa1a1a1, 0x706f70, 0x878787, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0x787878, 0x75412a, 0x9c5b4e, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x75412a, 0xa8e61d, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0x22b14c, 0xa8e61d, 0x22b14c, 0xa8e61d, 0x1e88e5, 0x40c4ff, 0x1e88e5, 0x039be5, 0x03a9f4, 0x1e88e5, 0x03a9f4, 0x40c4ff, 
  0xc48037, 0x61372e, 0xe5aa7a, 0xc48037, 0x9c5b4e, 0xe5aa7a, 0x61372e, 0x9c5b4e, 0xc48037, 0x61372e, 0xe5aa7a, 0xc48037, 0x9c5b4e, 0xe5aa7a, 0x61372e, 0x9c5b4e, 0x408c3b, 0x89c93a, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x315c2e, 0x408c3b, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x878787, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x8f8f8f, 0xd4d4d4, 0xffffff, 0xa1a1a1, 0xd4d4d4, 0xa1a1a1, 0x787878, 0xd4d4d4, 0xd4d4d4, 0x824328, 0x9c5b4e, 0x824328, 0x75412a, 0x9c5a3c, 0x8d5524, 0x824328, 0x75412a, 0x22b14c, 0xed1c24, 0xa8e61d, 0x22b14c, 0xa8e61d, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0x29b6f6, 0x40c4ff, 0x03a9f4, 0x0091ea, 0x0277bd, 0x00b7ef, 0x1e88e5, 0x039be5, 
  0x9c5b4e, 0xc48037, 0x9c5b4e, 0x9c5b4e, 0x61372e, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0x9c5b4e, 0x61372e, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0x315c2e, 0x408c3b, 0x6f8f44, 0x408c3b, 0x408c3b, 0x315c2e, 0x89c93a, 0x408c3b, 0x878787, 0xa1a1a1, 0x878787, 0x878787, 0x878787, 0x787878, 0x8f8f8f, 0xa1a1a1, 0xffffff, 0xd4d4d4, 0x787878, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xa1a1a1, 0x75412a, 0x824328, 0x824328, 0x823737, 0x824328, 0x824328, 0x824328, 0x824328, 0xa8e61d, 0x22b14c, 0xd3f9bc, 0xa8e61d, 0xed1c24, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x1e88e5, 0x0091ea, 0x00b7ef, 0x0091ea, 0x29b6f6, 0x0091ea, 0x2196f3, 0x0091ea, 
  0x75412a, 0x75412a, 0x824328, 0x75412a, 0x75412a, 0x795548, 0x75412a, 0x75412a, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0x9c5a3c, 0xc48037, 0xe5aa7a, 0xc48037, 0xc48037, 0x9c5a3c, 0x9c5a3c, 0x9c5b4e, 0x787878, 0xa1a1a1, 0x878787, 0xa1a1a1, 0xa1a1a1, 0x8f8f8f, 0x706f70, 0x878787, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x607d8b, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x607d8b, 
  0x75412a, 0xffc107, 0xffc107, 0xe0ac69, 0xffad60, 0xffcd94, 0xffc107, 0x75412a, 0xa1a1a1, 0x000000, 0x000000, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x315c2e, 0x9c5a3c, 0x61372e, 0x89c93a, 0x408c3b, 0xc48037, 0x61372e, 0x9c5b4e, 0x8f8f8f, 0x878787, 0xe0ac69, 0x878787, 0x8f8f8f, 0xa1a1a1, 0xffdbac, 0x8f8f8f, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x795548, 0xffc107, 0xb37334, 0xc68642, 0xc68642, 0xb37334, 0xff9800, 0x9c5b4e, 0xa1a1a1, 0x000000, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x9c5b4e, 0x408c3b, 0x9c5a3c, 0x315c2e, 0x9c5a3c, 0x89c93a, 0x9c5b4e, 0xc48037, 0x8f8f8f, 0x706f70, 0x878787, 0xa1a1a1, 0xffc107, 0x878787, 0x8f8f8f, 0x787878, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x5c5c5c, 0x5c5c5c, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x4dd0e1, 0x18ffff, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x75412a, 0xff9800, 0xc68642, 0xffad60, 0xffad60, 0xc68642, 0xe0ac69, 0x795548, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0xe5aa7a, 0x9c5a3c, 0x89c93a, 0x6f8f44, 0x315c2e, 0x408c3b, 0xc48037, 0x408c3b, 0xa1a1a1, 0x8f8f8f, 0x878787, 0xc68642, 0x878787, 0x8f8f8f, 0x878787, 0xa1a1a1, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x4f4f4f, 0x5c5c5c, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x00e5ff, 0x18ffff, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x5c5c5c, 0x4f4f4f, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x18ffff, 0x00e5ff, 0x607d8b, 0x828182, 0x607d8b, 
  0x9c5b4e, 0xff9800, 0xc68642, 0xe0ac69, 0xffcd94, 0xc68642, 0xff9800, 0x75412a, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0xc48037, 0x9c5b4e, 0x408c3b, 0x9c5a3c, 0x89c93a, 0x61372e, 0xc48037, 0x9c5a3c, 0x878787, 0xe0ac69, 0x878787, 0x878787, 0x878787, 0xffe0bd, 0x8f8f8f, 0x8f8f8f, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x5c5c5c, 0x4f4f4f, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x18ffff, 0x00e5ff, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x4f4f4f, 0x5c5c5c, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x00e5ff, 0x18ffff, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x795548, 0xffc107, 0xffc107, 0xc68642, 0xc68642, 0xb37334, 0xff9800, 0x9c5b4e, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x000000, 0xa1a1a1, 0x9c5b4e, 0x408c3b, 0x9c5a3c, 0x315c2e, 0x408c3b, 0x315c2e, 0x9c5b4e, 0xc48037, 0xa1a1a1, 0x878787, 0x706f70, 0x8f8f8f, 0xffdbac, 0x706f70, 0x878787, 0xa1a1a1, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x5c5c5c, 0x4f4f4f, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x18ffff, 0x4dd0e1, 0x607d8b, 0x828182, 0x607d8b, 
  0x75412a, 0xff9800, 0xffc107, 0xff9800, 0xff9800, 0xff9800, 0xffc107, 0x824328, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x000000, 0x000000, 0xa1a1a1, 0xc48037, 0x61372e, 0xe5aa7a, 0xc48037, 0x9c5a3c, 0xe5aa7a, 0x408c3b, 0x9c5b4e, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x878787, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x8f8f8f, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x9c5b4e, 0x75412a, 0x75412a, 0x75412a, 0x75412a, 0x9c5b4e, 0x75412a, 0x75412a, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0x9c5b4e, 0x9c5a3c, 0x9c5b4e, 0x9c5a3c, 0x61372e, 0x9c5b4e, 0xc48037, 0x315c2e, 0x878787, 0xa1a1a1, 0x878787, 0x878787, 0x878787, 0x787878, 0x8f8f8f, 0xa1a1a1, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x607d8b, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x607d8b, 




  0x9c5a3c, 0xc48037, 0xe5aa7a, 0xc48037, 0xc48037, 0x9c5a3c, 0xc48037, 0x9c5b4e, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x315c2e, 0x2b694c, 0x408c3b, 0x408c3b, 0x6f8f44, 0x408c3b, 0x2b694c, 0x315c2e, 0x408c3b, 0x408c3b, 0x2b694c, 0x6f8f44, 0x787878, 0xa1a1a1, 0x878787, 0xa1a1a1, 0xa1a1a1, 0x8f8f8f, 0x706f70, 0x878787, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0xa1a1a1, 0x75412a, 0x795548, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x824328, 0xd3f9bc, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x22b14c, 0xed1c24, 0xa8e61d, 0xd3f9bc, 0x40c4ff, 0x0091ea, 0x039be5, 0x0091ea, 0x00b7ef, 0x1e88e5, 0x29b6f6, 0x0091ea, 
  0xc48037, 0x9c5a3c, 0x61372e, 0x9c5a3c, 0x9c5a3c, 0xc48037, 0x61372e, 0x9c5b4e, 0x89c93a, 0x315c2e, 0x408c3b, 0x6f8f44, 0x2b694c, 0x408c3b, 0x89c93a, 0x408c3b, 0x408c3b, 0x315c2e, 0x408c3b, 0x408c3b, 0x89c93a, 0x408c3b, 0x408c3b, 0x408c3b, 0x8f8f8f, 0x878787, 0x706f70, 0x878787, 0x8f8f8f, 0xa1a1a1, 0x878787, 0x8f8f8f, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0xa1a1a1, 0x787878, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0x75412a, 0x8d5524, 0x824328, 0x75412a, 0x824328, 0x824328, 0x824328, 0x9c5b4e, 0xed1c24, 0xa8e61d, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0xa8e61d, 0x22b14c, 0xa8e61d, 0x1e88e5, 0x29b6f6, 0x03a9f4, 0x29b6f6, 0x1e88e5, 0x03a9f4, 0x40c4ff, 0x00b7ef, 
  0x9c5b4e, 0xc48037, 0x9c5a3c, 0xc48037, 0xe5aa7a, 0xc48037, 0x9c5b4e, 0xc48037, 0x408c3b, 0xc48037, 0x89c93a, 0x2b694c, 0xe5aa7a, 0x408c3b, 0x9c5b4e, 0x2b694c, 0x408c3b, 0x408c3b, 0x6f8f44, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x89c93a, 0x8f8f8f, 0x706f70, 0x878787, 0xa1a1a1, 0x878787, 0x878787, 0x8f8f8f, 0x787878, 0xa1a1a1, 0x787878, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0x75412a, 0x9c5a3c, 0x75412a, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x75412a, 0xd3f9bc, 0xa8e61d, 0x22b14c, 0xa8e61d, 0xd3f9bc, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x29b6f6, 0x40c4ff, 0x1e88e5, 0x0277bd, 0x039be5, 0x00b7ef, 0x1e88e5, 0x039be5, 
  0xe5aa7a, 0x9c5a3c, 0xc48037, 0xc48037, 0x9c5b4e, 0x9c5a3c, 0xc48037, 0xc48037, 0xe5aa7a, 0x9c5a3c, 0x408c3b, 0xc48037, 0x9c5b4e, 0x9c5a3c, 0xc48037, 0xc48037, 0x315c2e, 0x408c3b, 0x315c2e, 0x408c3b, 0x315c2e, 0x408c3b, 0x408c3b, 0x408c3b, 0xa1a1a1, 0x8f8f8f, 0x878787, 0x706f70, 0x8f8f8f, 0x8f8f8f, 0x878787, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x9c5a3c, 0x75412a, 0x824328, 0x75412a, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0xed1c24, 0xa8e61d, 0xa8e61d, 0xa8e61d, 0x22b14c, 0x03a9f4, 0x039be5, 0x29b6f6, 0x00b7ef, 0x1e88e5, 0x0091ea, 0x0277bd, 0x1e88e5, 
  0xc48037, 0x9c5b4e, 0xe5aa7a, 0x9c5a3c, 0xc48037, 0x61372e, 0xc48037, 0x9c5a3c, 0xc48037, 0x9c5b4e, 0xe5aa7a, 0x9c5a3c, 0xc48037, 0x61372e, 0xc48037, 0x9c5a3c, 0x408c3b, 0x6f8f44, 0x408c3b, 0x6f8f44, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x878787, 0xa1a1a1, 0x8f8f8f, 0x828182, 0x878787, 0xa1a1a1, 0x8f8f8f, 0x8f8f8f, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x9c5a3c, 0x75412a, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x22b14c, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0xed1c24, 0x1e88e5, 0x039be5, 0x03a9f4, 0x1e88e5, 0x1e88e5, 0x039be5, 0x00b7ef, 0x0091ea, 
  0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x408c3b, 0x408c3b, 0x408c3b, 0x315c2e, 0x408c3b, 0x6f8f44, 0x408c3b, 0x315c2e, 0xa1a1a1, 0x878787, 0x706f70, 0x8f8f8f, 0xa1a1a1, 0x706f70, 0x878787, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0x787878, 0x75412a, 0x9c5b4e, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x75412a, 0xa8e61d, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0x22b14c, 0xa8e61d, 0x22b14c, 0xa8e61d, 0x1e88e5, 0x40c4ff, 0x1e88e5, 0x039be5, 0x03a9f4, 0x1e88e5, 0x03a9f4, 0x40c4ff, 
  0xc48037, 0x61372e, 0xe5aa7a, 0xc48037, 0x9c5b4e, 0xe5aa7a, 0x61372e, 0x9c5b4e, 0xc48037, 0x61372e, 0xe5aa7a, 0xc48037, 0x9c5b4e, 0xe5aa7a, 0x61372e, 0x9c5b4e, 0x408c3b, 0x89c93a, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x315c2e, 0x408c3b, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x878787, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x8f8f8f, 0xd4d4d4, 0xffffff, 0xa1a1a1, 0xd4d4d4, 0xa1a1a1, 0x787878, 0xd4d4d4, 0xd4d4d4, 0x824328, 0x9c5b4e, 0x824328, 0x75412a, 0x9c5a3c, 0x8d5524, 0x824328, 0x75412a, 0x22b14c, 0xed1c24, 0xa8e61d, 0x22b14c, 0xa8e61d, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0x29b6f6, 0x40c4ff, 0x03a9f4, 0x0091ea, 0x0277bd, 0x00b7ef, 0x1e88e5, 0x039be5, 
  0x9c5b4e, 0xc48037, 0x9c5b4e, 0x9c5b4e, 0x61372e, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0x9c5b4e, 0x61372e, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0x315c2e, 0x408c3b, 0x6f8f44, 0x408c3b, 0x408c3b, 0x315c2e, 0x89c93a, 0x408c3b, 0x878787, 0xa1a1a1, 0x878787, 0x878787, 0x878787, 0x787878, 0x8f8f8f, 0xa1a1a1, 0xffffff, 0xd4d4d4, 0x787878, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xa1a1a1, 0x75412a, 0x824328, 0x824328, 0x823737, 0x824328, 0x824328, 0x824328, 0x824328, 0xa8e61d, 0x22b14c, 0xd3f9bc, 0xa8e61d, 0xed1c24, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x1e88e5, 0x0091ea, 0x00b7ef, 0x0091ea, 0x29b6f6, 0x0091ea, 0x2196f3, 0x0091ea, 
  0x75412a, 0x75412a, 0x824328, 0x75412a, 0x75412a, 0x795548, 0x75412a, 0x75412a, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0x9c5a3c, 0xc48037, 0xe5aa7a, 0xc48037, 0xc48037, 0x9c5a3c, 0x9c5a3c, 0x9c5b4e, 0x787878, 0xa1a1a1, 0x878787, 0xa1a1a1, 0xa1a1a1, 0x8f8f8f, 0x706f70, 0x878787, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x607d8b, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x607d8b, 
  0x75412a, 0xffc107, 0xffc107, 0xe0ac69, 0xffad60, 0xffcd94, 0xffc107, 0x75412a, 0xa1a1a1, 0x000000, 0x000000, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x315c2e, 0x9c5a3c, 0x61372e, 0x89c93a, 0x408c3b, 0xc48037, 0x61372e, 0x9c5b4e, 0x8f8f8f, 0x878787, 0xe0ac69, 0x878787, 0x8f8f8f, 0xa1a1a1, 0xffdbac, 0x8f8f8f, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x795548, 0xffc107, 0xb37334, 0xc68642, 0xc68642, 0xb37334, 0xff9800, 0x9c5b4e, 0xa1a1a1, 0x000000, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x9c5b4e, 0x408c3b, 0x9c5a3c, 0x315c2e, 0x9c5a3c, 0x89c93a, 0x9c5b4e, 0xc48037, 0x8f8f8f, 0x706f70, 0x878787, 0xa1a1a1, 0xffc107, 0x878787, 0x8f8f8f, 0x787878, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x5c5c5c, 0x5c5c5c, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x4dd0e1, 0x18ffff, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x75412a, 0xff9800, 0xc68642, 0xffad60, 0xffad60, 0xc68642, 0xe0ac69, 0x795548, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0xe5aa7a, 0x9c5a3c, 0x89c93a, 0x6f8f44, 0x315c2e, 0x408c3b, 0xc48037, 0x408c3b, 0xa1a1a1, 0x8f8f8f, 0x878787, 0xc68642, 0x878787, 0x8f8f8f, 0x878787, 0xa1a1a1, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x4f4f4f, 0x5c5c5c, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x00e5ff, 0x18ffff, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x5c5c5c, 0x4f4f4f, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x18ffff, 0x00e5ff, 0x607d8b, 0x828182, 0x607d8b, 
  0x9c5b4e, 0xff9800, 0xc68642, 0xe0ac69, 0xffcd94, 0xc68642, 0xff9800, 0x75412a, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0xc48037, 0x9c5b4e, 0x408c3b, 0x9c5a3c, 0x89c93a, 0x61372e, 0xc48037, 0x9c5a3c, 0x878787, 0xe0ac69, 0x878787, 0x878787, 0x878787, 0xffe0bd, 0x8f8f8f, 0x8f8f8f, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x5c5c5c, 0x4f4f4f, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x18ffff, 0x00e5ff, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x4f4f4f, 0x5c5c5c, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x00e5ff, 0x18ffff, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x795548, 0xffc107, 0xffc107, 0xc68642, 0xc68642, 0xb37334, 0xff9800, 0x9c5b4e, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x000000, 0xa1a1a1, 0x9c5b4e, 0x408c3b, 0x9c5a3c, 0x315c2e, 0x408c3b, 0x315c2e, 0x9c5b4e, 0xc48037, 0xa1a1a1, 0x878787, 0x706f70, 0x8f8f8f, 0xffdbac, 0x706f70, 0x878787, 0xa1a1a1, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x5c5c5c, 0x4f4f4f, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x18ffff, 0x4dd0e1, 0x607d8b, 0x828182, 0x607d8b, 
  0x75412a, 0xff9800, 0xffc107, 0xff9800, 0xff9800, 0xff9800, 0xffc107, 0x824328, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x000000, 0x000000, 0xa1a1a1, 0xc48037, 0x61372e, 0xe5aa7a, 0xc48037, 0x9c5a3c, 0xe5aa7a, 0x408c3b, 0x9c5b4e, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x878787, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x8f8f8f, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x9c5b4e, 0x75412a, 0x75412a, 0x75412a, 0x75412a, 0x9c5b4e, 0x75412a, 0x75412a, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0x9c5b4e, 0x9c5a3c, 0x9c5b4e, 0x9c5a3c, 0x61372e, 0x9c5b4e, 0xc48037, 0x315c2e, 0x878787, 0xa1a1a1, 0x878787, 0x878787, 0x878787, 0x787878, 0x8f8f8f, 0xa1a1a1, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x607d8b, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x607d8b, 




  0x9c5a3c, 0xc48037, 0xe5aa7a, 0xc48037, 0xc48037, 0x9c5a3c, 0xc48037, 0x9c5b4e, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x315c2e, 0x2b694c, 0x408c3b, 0x408c3b, 0x6f8f44, 0x408c3b, 0x2b694c, 0x315c2e, 0x408c3b, 0x408c3b, 0x2b694c, 0x6f8f44, 0x787878, 0xa1a1a1, 0x878787, 0xa1a1a1, 0xa1a1a1, 0x8f8f8f, 0x706f70, 0x878787, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0xa1a1a1, 0x75412a, 0x795548, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x824328, 0xd3f9bc, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x22b14c, 0xed1c24, 0xa8e61d, 0xd3f9bc, 0x40c4ff, 0x0091ea, 0x039be5, 0x0091ea, 0x00b7ef, 0x1e88e5, 0x29b6f6, 0x0091ea, 
  0xc48037, 0x9c5a3c, 0x61372e, 0x9c5a3c, 0x9c5a3c, 0xc48037, 0x61372e, 0x9c5b4e, 0x89c93a, 0x315c2e, 0x408c3b, 0x6f8f44, 0x2b694c, 0x408c3b, 0x89c93a, 0x408c3b, 0x408c3b, 0x315c2e, 0x408c3b, 0x408c3b, 0x89c93a, 0x408c3b, 0x408c3b, 0x408c3b, 0x8f8f8f, 0x878787, 0x706f70, 0x878787, 0x8f8f8f, 0xa1a1a1, 0x878787, 0x8f8f8f, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0xa1a1a1, 0x787878, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0x75412a, 0x8d5524, 0x824328, 0x75412a, 0x824328, 0x824328, 0x824328, 0x9c5b4e, 0xed1c24, 0xa8e61d, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0xa8e61d, 0x22b14c, 0xa8e61d, 0x1e88e5, 0x29b6f6, 0x03a9f4, 0x29b6f6, 0x1e88e5, 0x03a9f4, 0x40c4ff, 0x00b7ef, 
  0x9c5b4e, 0xc48037, 0x9c5a3c, 0xc48037, 0xe5aa7a, 0xc48037, 0x9c5b4e, 0xc48037, 0x408c3b, 0xc48037, 0x89c93a, 0x2b694c, 0xe5aa7a, 0x408c3b, 0x9c5b4e, 0x2b694c, 0x408c3b, 0x408c3b, 0x6f8f44, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x89c93a, 0x8f8f8f, 0x706f70, 0x878787, 0xa1a1a1, 0x878787, 0x878787, 0x8f8f8f, 0x787878, 0xa1a1a1, 0x787878, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0x75412a, 0x9c5a3c, 0x75412a, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x75412a, 0xd3f9bc, 0xa8e61d, 0x22b14c, 0xa8e61d, 0xd3f9bc, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x29b6f6, 0x40c4ff, 0x1e88e5, 0x0277bd, 0x039be5, 0x00b7ef, 0x1e88e5, 0x039be5, 
  0xe5aa7a, 0x9c5a3c, 0xc48037, 0xc48037, 0x9c5b4e, 0x9c5a3c, 0xc48037, 0xc48037, 0xe5aa7a, 0x9c5a3c, 0x408c3b, 0xc48037, 0x9c5b4e, 0x9c5a3c, 0xc48037, 0xc48037, 0x315c2e, 0x408c3b, 0x315c2e, 0x408c3b, 0x315c2e, 0x408c3b, 0x408c3b, 0x408c3b, 0xa1a1a1, 0x8f8f8f, 0x878787, 0x706f70, 0x8f8f8f, 0x8f8f8f, 0x878787, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x9c5a3c, 0x75412a, 0x824328, 0x75412a, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0xed1c24, 0xa8e61d, 0xa8e61d, 0xa8e61d, 0x22b14c, 0x03a9f4, 0x039be5, 0x29b6f6, 0x00b7ef, 0x1e88e5, 0x0091ea, 0x0277bd, 0x1e88e5, 
  0xc48037, 0x9c5b4e, 0xe5aa7a, 0x9c5a3c, 0xc48037, 0x61372e, 0xc48037, 0x9c5a3c, 0xc48037, 0x9c5b4e, 0xe5aa7a, 0x9c5a3c, 0xc48037, 0x61372e, 0xc48037, 0x9c5a3c, 0x408c3b, 0x6f8f44, 0x408c3b, 0x6f8f44, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x878787, 0xa1a1a1, 0x8f8f8f, 0x828182, 0x878787, 0xa1a1a1, 0x8f8f8f, 0x8f8f8f, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x9c5a3c, 0x75412a, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x22b14c, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0xed1c24, 0x1e88e5, 0x039be5, 0x03a9f4, 0x1e88e5, 0x1e88e5, 0x039be5, 0x00b7ef, 0x0091ea, 
  0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x9c5a3c, 0x9c5b4e, 0xc48037, 0x408c3b, 0x408c3b, 0x408c3b, 0x315c2e, 0x408c3b, 0x6f8f44, 0x408c3b, 0x315c2e, 0xa1a1a1, 0x878787, 0x706f70, 0x8f8f8f, 0xa1a1a1, 0x706f70, 0x878787, 0xa1a1a1, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xa1a1a1, 0xd4d4d4, 0x787878, 0x75412a, 0x9c5b4e, 0x824328, 0x75412a, 0x824328, 0x75412a, 0x824328, 0x75412a, 0xa8e61d, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0x22b14c, 0xa8e61d, 0x22b14c, 0xa8e61d, 0x1e88e5, 0x40c4ff, 0x1e88e5, 0x039be5, 0x03a9f4, 0x1e88e5, 0x03a9f4, 0x40c4ff, 
  0xc48037, 0x61372e, 0xe5aa7a, 0xc48037, 0x9c5b4e, 0xe5aa7a, 0x61372e, 0x9c5b4e, 0xc48037, 0x61372e, 0xe5aa7a, 0xc48037, 0x9c5b4e, 0xe5aa7a, 0x61372e, 0x9c5b4e, 0x408c3b, 0x89c93a, 0x2b694c, 0x408c3b, 0x2b694c, 0x408c3b, 0x315c2e, 0x408c3b, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x878787, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x8f8f8f, 0xd4d4d4, 0xffffff, 0xa1a1a1, 0xd4d4d4, 0xa1a1a1, 0x787878, 0xd4d4d4, 0xd4d4d4, 0x824328, 0x9c5b4e, 0x824328, 0x75412a, 0x9c5a3c, 0x8d5524, 0x824328, 0x75412a, 0x22b14c, 0xed1c24, 0xa8e61d, 0x22b14c, 0xa8e61d, 0xa8e61d, 0xd3f9bc, 0xa8e61d, 0x29b6f6, 0x40c4ff, 0x03a9f4, 0x0091ea, 0x0277bd, 0x00b7ef, 0x1e88e5, 0x039be5, 
  0x9c5b4e, 0xc48037, 0x9c5b4e, 0x9c5b4e, 0x61372e, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0x9c5b4e, 0x61372e, 0x9c5b4e, 0xc48037, 0x9c5b4e, 0x315c2e, 0x408c3b, 0x6f8f44, 0x408c3b, 0x408c3b, 0x315c2e, 0x89c93a, 0x408c3b, 0x878787, 0xa1a1a1, 0x878787, 0x878787, 0x878787, 0x787878, 0x8f8f8f, 0xa1a1a1, 0xffffff, 0xd4d4d4, 0x787878, 0xd4d4d4, 0xd4d4d4, 0xd4d4d4, 0xffffff, 0xa1a1a1, 0x75412a, 0x824328, 0x824328, 0x823737, 0x824328, 0x824328, 0x824328, 0x824328, 0xa8e61d, 0x22b14c, 0xd3f9bc, 0xa8e61d, 0xed1c24, 0x22b14c, 0xa8e61d, 0xa8e61d, 0x1e88e5, 0x0091ea, 0x00b7ef, 0x0091ea, 0x29b6f6, 0x0091ea, 0x2196f3, 0x0091ea, 
  0x75412a, 0x75412a, 0x824328, 0x75412a, 0x75412a, 0x795548, 0x75412a, 0x75412a, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0x9c5a3c, 0xc48037, 0xe5aa7a, 0xc48037, 0xc48037, 0x9c5a3c, 0x9c5a3c, 0x9c5b4e, 0x787878, 0xa1a1a1, 0x878787, 0xa1a1a1, 0xa1a1a1, 0x8f8f8f, 0x706f70, 0x878787, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x607d8b, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x607d8b, 
  0x75412a, 0xffc107, 0xffc107, 0xe0ac69, 0xffad60, 0xffcd94, 0xffc107, 0x75412a, 0xa1a1a1, 0x000000, 0x000000, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x315c2e, 0x9c5a3c, 0x61372e, 0x89c93a, 0x408c3b, 0xc48037, 0x61372e, 0x9c5b4e, 0x8f8f8f, 0x878787, 0xe0ac69, 0x878787, 0x8f8f8f, 0xa1a1a1, 0xffdbac, 0x8f8f8f, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x795548, 0xffc107, 0xb37334, 0xc68642, 0xc68642, 0xb37334, 0xff9800, 0x9c5b4e, 0xa1a1a1, 0x000000, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x9c5b4e, 0x408c3b, 0x9c5a3c, 0x315c2e, 0x9c5a3c, 0x89c93a, 0x9c5b4e, 0xc48037, 0x8f8f8f, 0x706f70, 0x878787, 0xa1a1a1, 0xffc107, 0x878787, 0x8f8f8f, 0x787878, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x5c5c5c, 0x5c5c5c, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x4dd0e1, 0x18ffff, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x75412a, 0xff9800, 0xc68642, 0xffad60, 0xffad60, 0xc68642, 0xe0ac69, 0x795548, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0xe5aa7a, 0x9c5a3c, 0x89c93a, 0x6f8f44, 0x315c2e, 0x408c3b, 0xc48037, 0x408c3b, 0xa1a1a1, 0x8f8f8f, 0x878787, 0xc68642, 0x878787, 0x8f8f8f, 0x878787, 0xa1a1a1, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x4f4f4f, 0x5c5c5c, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x00e5ff, 0x18ffff, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x5c5c5c, 0x4f4f4f, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x18ffff, 0x00e5ff, 0x607d8b, 0x828182, 0x607d8b, 
  0x9c5b4e, 0xff9800, 0xc68642, 0xe0ac69, 0xffcd94, 0xc68642, 0xff9800, 0x75412a, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0xc48037, 0x9c5b4e, 0x408c3b, 0x9c5a3c, 0x89c93a, 0x61372e, 0xc48037, 0x9c5a3c, 0x878787, 0xe0ac69, 0x878787, 0x878787, 0x878787, 0xffe0bd, 0x8f8f8f, 0x8f8f8f, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x5c5c5c, 0x4f4f4f, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x18ffff, 0x00e5ff, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x4f4f4f, 0x5c5c5c, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x00e5ff, 0x18ffff, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x795548, 0xffc107, 0xffc107, 0xc68642, 0xc68642, 0xb37334, 0xff9800, 0x9c5b4e, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x000000, 0xa1a1a1, 0x9c5b4e, 0x408c3b, 0x9c5a3c, 0x315c2e, 0x408c3b, 0x315c2e, 0x9c5b4e, 0xc48037, 0xa1a1a1, 0x878787, 0x706f70, 0x8f8f8f, 0xffdbac, 0x706f70, 0x878787, 0xa1a1a1, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x5c5c5c, 0x4f4f4f, 0x607d8b, 0x828182, 0x607d8b, 0x607d8b, 0x828182, 0x607d8b, 0x18ffff, 0x4dd0e1, 0x607d8b, 0x828182, 0x607d8b, 
  0x75412a, 0xff9800, 0xffc107, 0xff9800, 0xff9800, 0xff9800, 0xffc107, 0x824328, 0xa1a1a1, 0x000000, 0x000000, 0x000000, 0xa1a1a1, 0x000000, 0x000000, 0xa1a1a1, 0xc48037, 0x61372e, 0xe5aa7a, 0xc48037, 0x9c5a3c, 0xe5aa7a, 0x408c3b, 0x9c5b4e, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x878787, 0x8f8f8f, 0x8f8f8f, 0xa1a1a1, 0x8f8f8f, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x9e9e9e, 0x607d8b, 
  0x9c5b4e, 0x75412a, 0x75412a, 0x75412a, 0x75412a, 0x9c5b4e, 0x75412a, 0x75412a, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0xa1a1a1, 0x9c5b4e, 0x9c5a3c, 0x9c5b4e, 0x9c5a3c, 0x61372e, 0x9c5b4e, 0xc48037, 0x315c2e, 0x878787, 0xa1a1a1, 0x878787, 0x878787, 0x878787, 0x787878, 0x8f8f8f, 0xa1a1a1, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x9e9e9e, 0x828182, 0x607d8b, 0x607d8b, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x607d8b, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x607d8b, 0x607d8b, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x828182, 0x9e9e9e, 0x607d8b, 

};

#include <iso646.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <unistd.h>
#include <math.h>
#include <assert.h>

#include <SDL.h>
#import <Metal/Metal.h>
#import <QuartzCore/CAMetalLayer.h>


struct vec3 {float x,y,z;};
typedef float* mat4;

static int window_width = 1600;
static int window_height = 1000;
static float aspect = 1.6f;

static const float fovy = 1.22173f /*radians*/;
static const float znear = 0.01f;
static const float zfar = 1000.0f;
static const float camera_sensitivity = 0.005f;
static const float camera_accel = 0.00003f;
static const float drag = 0.95f;

static const int32_t ms_delay_per_frame = 8;

static bool debug = false;
static	bool quit = false;
static	bool tab = false;
static 	bool should_move_camera = true;
static 	bool is_fullscreen = false;
static	int counter = 0;
static	float delta = 0.0;

static	float pitch = 0.0f, yaw = 0.0f;
static	struct vec3 position = {10, 5, 10};
static	struct vec3 velocity = {0, 0, 0};

static	struct vec3 forward = 	{0, 0, -1};
static	struct vec3 straight = 	{0, 0, 1};
static	struct vec3 up = 	{0, 1, 0};
static	struct vec3 right = 	{-1, 0, 0};

static inline void perspective(mat4 result, float fov, float asp, float zNear, float zFar) {
	const float t = tanf(fov / 2.0f);
	result[4 * 0 + 0] = 1.0f / (asp * t);
	result[4 * 1 + 1] = 1.0f / t;
	result[4 * 2 + 2] = -(zFar + zNear) / (zFar - zNear);
	result[4 * 2 + 3] = -1.0f;
	result[4 * 3 + 2] = -(2.0f * zFar * zNear) / (zFar - zNear);
}

static inline float inversesqrt(float y) {
	float x2 = y * 0.5f;
	int32_t i = *(int32_t *)&y;
	i = 0x5f3759df - (i >> 1); 	// glm uses a86 for last three digits.
	y = *(float*) &i;
	return y * (1.5f - x2 * y * y);
}

static inline struct vec3 normalize(struct vec3 v) {
   float s = inversesqrt(v.x * v.x + v.y * v.y + v.z * v.z);
   return (struct vec3) {v.x * s, v.y * s, v.z * s};
}

static inline struct vec3 cross(struct vec3 x, struct vec3 y) {
	return (struct vec3) {
		x.y * y.z - y.y * x.z,
		x.z * y.x - y.z * x.x,
		x.x * y.y - y.x * x.y
	};
}

static inline float dot(struct vec3 a, struct vec3 b) {
	return a.x * b.x + a.y * b.y + a.z * b.z;
}

static inline void look_at(mat4 result, struct vec3 eye, struct vec3 f, struct vec3 given_up) {
	
	struct vec3 s = normalize(cross(f, given_up));
	struct vec3 u = cross(s, f);

	result[4 * 0 + 0] =  s.x;
	result[4 * 1 + 0] =  s.y;
	result[4 * 2 + 0] =  s.z;
	result[4 * 0 + 1] =  u.x;
	result[4 * 1 + 1] =  u.y;
	result[4 * 2 + 1] =  u.z;
	result[4 * 0 + 2] = -f.x;
	result[4 * 1 + 2] = -f.y;
	result[4 * 2 + 2] = -f.z;
	result[4 * 3 + 0] = -dot(s, eye);
	result[4 * 3 + 1] = -dot(u, eye);
	result[4 * 3 + 2] =  dot(f, eye);
	result[4 * 3 + 3] =  1;
}

static inline void multiply_matrix(mat4 out, mat4 A, mat4 B) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            out[4 * i + j] = 
		A[4 * i + 0] * B[4 * 0 + j] + 
		A[4 * i + 1] * B[4 * 1 + j] + 
		A[4 * i + 2] * B[4 * 2 + j] + 
		A[4 * i + 3] * B[4 * 3 + j];
        }
    }
}

static inline void move_camera(void) {
	const float pi_over_2 = 1.57079632679f;
	if (pitch > pi_over_2) pitch = pi_over_2 - 0.0001f;
	else if (pitch < -pi_over_2) pitch = -pi_over_2 + 0.0001f;

	forward.x = -sinf(yaw) * cosf(pitch);
	forward.y = -sinf(pitch);
	forward.z = -cosf(yaw) * cosf(pitch);
	forward = normalize(forward);

	right.x = -cosf(yaw);
	right.y = 0.0;
	right.z = sinf(yaw);
	right = normalize(right);
	
	straight = cross(right, up);
}


#define push_vertex(xo, yo, zo, u, v) 			\
	do {						\
	verticies[raw_count++] = (float)x + xo;		\
	verticies[raw_count++] = (float)y + yo;		\
	verticies[raw_count++] = (float)z + zo;		\
	verticies[raw_count++] = (float) u;		\
	verticies[raw_count++] = (float) v;		\
	vertex_count++;					\
	} while(0);


int main(void) { // int argc, const char** argv

	srand((unsigned)time(NULL));

	uint8_t pixel_bytes[64 * 64 * 4] = {0};
	for (unsigned i = 0; i < 64 * 64; i++) {
		pixel_bytes[i * 4 + 0] = 0xff & (atlas[i] >> 16);
		pixel_bytes[i * 4 + 1] = 0xff & (atlas[i] >> 8);
		pixel_bytes[i * 4 + 2] = 0xff & (atlas[i] >> 0);
		pixel_bytes[i * 4 + 3] = 0xff;
	}



	const int s = 20;
	const int space_count = s * s * s;
	int8_t* space = calloc(space_count, 1);

	for (int x = 1; x < s; x++) {
		for (int z = 1; z < s; z++) {
			const int y = 0;
			space[s * s * x + s * y + z] = rand() % 2;
		}
	}
	space[s * s * 1 + s * 1 + 1] = 1;
	space[s * s * 1 + s * 1 + 2] = 1;
	space[s * s * 1 + s * 2 + 1] = 1;
	space[s * s * 1 + s * 2 + 2] = 1;
	space[s * s * 2 + s * 1 + 1] = 1;
	space[s * s * 2 + s * 1 + 2] = 1;
	space[s * s * 2 + s * 2 + 1] = 1;
	space[s * s * 2 + s * 2 + 2] = 1;
	space[s * s * 4 + s * 4 + 4] = 1;

	size_t vertex_count = 0, raw_count = 0;//, index_count = 0;
	//unsigned* indicies = malloc(sizeof(unsigned) * space_count * );
	float* verticies = malloc(sizeof(float) * space_count * 6 * 6 * 5);

	//float top_x[256] 	= {	0	};
	//float top_y[256] 	= {	0	};
	//float bottom_x[256] 	= {	0	};
	//float bottom_y[256] 	= {	0	};
	//float sides_x[256] 	= {	1	};
	//float sides_y[256] 	= {	0	};

	for (int x = 0; x < s; x++) {
		for (int y = 0; y < s; y++) {
			for (int z = 0; z < s; z++) {

				int8_t block = space[s * s * x + s * y + z];
				if (not block) continue;
				printf("generating block at <%d,%d,%d>...\n", x,y,z);

				//block--;

				const float ut = 0;//(float) top_x[block] / 64.0f;
				const float vt = 0;//(float) top_y[block] / 64.0f;
				//const float ub = (float) bottom_x[block] / 64.0f;
				//const float vb = (float) bottom_y[block] / 64.0f;
				//const float us = (float) sides_x[block] / 64.0f;
				//const float vs = (float) sides_y[block] / 64.0f;
				
				const float e = 1;//8.0f / 64.0f;
				const float _ = 0;
				
				if (not z or not space[s * s * (x) + s * (y) + (z - 1)]) {
					push_vertex(0,0,0, ut+_,vt+_);
					push_vertex(0,1,0, ut+_,vt+e);
					push_vertex(1,0,0, ut+e,vt+_);
					push_vertex(1,1,0, ut+e,vt+e);
					push_vertex(1,0,0, ut+e,vt+_);
					push_vertex(0,1,0, ut+_,vt+e);
				}

				if (z >= s - 1 or not space[s * s * (x) + s * (y) + (z + 1)]) {
					push_vertex(0,0,1, ut+_,vt+_);
					push_vertex(1,0,1, ut+_,vt+e);
					push_vertex(0,1,1, ut+e,vt+_);
					push_vertex(1,1,1, ut+e,vt+e);
					push_vertex(0,1,1, ut+e,vt+_);
					push_vertex(1,0,1, ut+_,vt+e);
				}

				if (x >= s - 1 or not space[s * s * (x + 1) + s * (y) + (z)]) {
					push_vertex(1,1,1, ut+_,vt+_);
					push_vertex(1,0,0, ut+_,vt+e);
					push_vertex(1,1,0, ut+e,vt+_);
					push_vertex(1,1,1, ut+e,vt+e);
					push_vertex(1,0,1, ut+e,vt+_);
					push_vertex(1,0,0, ut+_,vt+e);
				}

				if (not x or not space[s * s * (x - 1) + s * (y) + (z)]) {
					push_vertex(0,1,1, ut+_,vt+_);
					push_vertex(0,1,0, ut+_,vt+e);
					push_vertex(0,0,0, ut+e,vt+_);
					push_vertex(0,1,1, ut+e,vt+e);
					push_vertex(0,0,0, ut+e,vt+_);
					push_vertex(0,0,1, ut+_,vt+e);
				}

				if (not y or not space[s * s * (x) + s * (y - 1) + (z)]) {
					push_vertex(1,0,1, ut+_,vt+_);
					push_vertex(0,0,1, ut+_,vt+e);
					push_vertex(1,0,0, ut+e,vt+_);
					push_vertex(0,0,0, ut+e,vt+e);
					push_vertex(1,0,0, ut+e,vt+_);
					push_vertex(0,0,1, ut+_,vt+e);
				}

				if (y >= s - 1 or not space[s * s * (x) + s * (y + 1) + (z)]) {
					push_vertex(1,1,1, ut+_,vt+_);
					push_vertex(1,1,0, ut+_,vt+e);
					push_vertex(0,1,1, ut+e,vt+_);
					push_vertex(0,1,0, ut+e,vt+e);
					push_vertex(0,1,1, ut+e,vt+_);
					push_vertex(1,1,0, ut+_,vt+e);
				}
			}
		}
	}

	puts("debug: our verticies data is: ");
	for (size_t i = 0; i < vertex_count * 5; i++) {
		if (i % 5 == 0) puts("");
		printf("%.2f, ", (double) verticies[i]);
	}
	puts("");

	float* view_matrix = calloc(16, 4);
	float* perspective_matrix = calloc(16, 4);
	float* matrix = calloc(16, 4);
	float* copy = calloc(16, 4);

	straight = cross(right, up);
	perspective(perspective_matrix, fovy, aspect, znear, zfar);





	SDL_SetHint(SDL_HINT_RENDER_DRIVER, "metal");
	if (SDL_Init(SDL_INIT_EVERYTHING)) exit(printf("SDL_Init failed: %s\n", SDL_GetError()));
	SDL_Window *window = SDL_CreateWindow("block game", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 
				window_width, window_height, SDL_WINDOW_RESIZABLE | SDL_WINDOW_ALLOW_HIGHDPI);
	SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
	SDL_SetRelativeMouseMode(SDL_TRUE);


	const CAMetalLayer *swapchain = (__bridge CAMetalLayer *)SDL_RenderGetMetalLayer(renderer);
	const id<MTLDevice> gpu = swapchain.device;
	const id<MTLCommandQueue> queue = [gpu newCommandQueue];
	MTLClearColor color = MTLClearColorMake(0, 0, 0, 1);


	while (not quit) {
		uint32_t start = SDL_GetTicks();

		SDL_Event event;
		while (SDL_PollEvent(&event)) {

			const Uint8* key = SDL_GetKeyboardState(0);

			if (event.type == SDL_QUIT) quit = true;

			else if (event.type == SDL_WINDOWEVENT_RESIZED) {
				printf("window was resized!!\n");
				int w=0,h=0;
				SDL_GetWindowSize(window, &w, &h);
				printf("width = %d, height = %d", w,h);
				window_width = w;
				window_height = h;
				aspect = (float) window_width / (float) window_height;
				perspective(perspective_matrix, fovy, aspect, znear, zfar);
			}

			else if (event.type == SDL_MOUSEMOTION and should_move_camera) {
				
    				float dx = (float) event.motion.xrel;
    				float dy = (float) event.motion.yrel;

				yaw -= camera_sensitivity * dx;
				pitch += camera_sensitivity * dy;
	
				move_camera();
			}

			else if (event.type == SDL_KEYDOWN) {
				if (key[SDL_SCANCODE_ESCAPE]) quit = true;
				if (tab and key[SDL_SCANCODE_Q]) quit = true; 
				if (tab and key[SDL_SCANCODE_0]) debug = !debug;	
				if (tab and key[SDL_SCANCODE_1]) { // pause game.
					should_move_camera = not should_move_camera;
					SDL_SetRelativeMouseMode(should_move_camera);
				}
				if (tab and key[SDL_SCANCODE_2]) {
					is_fullscreen = not is_fullscreen;
					SDL_SetWindowFullscreen(window, is_fullscreen ? SDL_WINDOW_FULLSCREEN : 0);
					int w = 0, h = 0;
					SDL_GetWindowSize(window, &w, &h);

					printf("width = %d, height = %d", w,h);
					window_width = w;
					window_height = h;
					aspect = (float) window_width / (float) window_height;
					perspective(perspective_matrix, fovy, aspect, znear, zfar);
				}
			}
		}

		const Uint8* key = SDL_GetKeyboardState(0);
		
		tab = !!key[SDL_SCANCODE_TAB];

		if (key[SDL_SCANCODE_SPACE]) {
			velocity.x += delta * camera_accel * up.x;
			velocity.y += delta * camera_accel * up.y;
			velocity.z += delta * camera_accel * up.z;
		}

		if (key[SDL_SCANCODE_A]) { 
			velocity.x -= delta * camera_accel * up.x;
			velocity.y -= delta * camera_accel * up.y;
			velocity.z -= delta * camera_accel * up.z;
		}

		if (key[SDL_SCANCODE_E]) { 
			velocity.x += delta * camera_accel * straight.x;
			velocity.y += delta * camera_accel * straight.y;
			velocity.z += delta * camera_accel * straight.z;
		}
		if (key[SDL_SCANCODE_D]) { 
			velocity.x -= delta * camera_accel * straight.x;
			velocity.y -= delta * camera_accel * straight.y;
			velocity.z -= delta * camera_accel * straight.z;
		}

		if (key[SDL_SCANCODE_S]) {
			velocity.x += delta * camera_accel * right.x;
			velocity.y += delta * camera_accel * right.y;
			velocity.z += delta * camera_accel * right.z;
		}
		
		if (key[SDL_SCANCODE_F]) {
			velocity.x -= delta * camera_accel * right.x;
			velocity.y -= delta * camera_accel * right.y;
			velocity.z -= delta * camera_accel * right.z;
		}

		if (key[SDL_SCANCODE_L]) { 
			yaw -= 0.08f;
			move_camera();
		}
		if (key[SDL_SCANCODE_J]) { 
			yaw += 0.08f;
			move_camera();
		}
		if (key[SDL_SCANCODE_I]) { 
			pitch -= 0.08f;
			move_camera();
		}
		if (key[SDL_SCANCODE_K]) { 
			pitch += 0.08f;
			move_camera();
		}

		look_at(view_matrix, position, forward, up);
		memset(matrix, 0, 64);
		matrix[4 * 0 + 0] = 1.0;
		matrix[4 * 1 + 1] = 1.0;
		matrix[4 * 2 + 2] = 1.0;
		matrix[4 * 3 + 3] = 1.0;

		memcpy(copy, matrix, 64);
		multiply_matrix(matrix, copy, view_matrix);
		memcpy(copy, matrix, 64);
		multiply_matrix(matrix, copy, perspective_matrix);

		//glClearColor(0.0f, 0.5f, 0.0f, 1.0f);
		//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		//glBufferData(verticies);
		//glUniformMatrix4fv(matrix_uniform, 1, GL_FALSE, matrix);
		//glDrawArrays(key[SDL_SCANCODE_GRAVE] ? GL_LINES : GL_TRIANGLES, 0, vertex_count);
		//SDL_GL_SwapWindow(window);

	

	
		@autoreleasepool {
			id<CAMetalDrawable> surface = [swapchain nextDrawable];

			color.red = (color.red > 1.0) ? 0 : color.red + 0.01;

			MTLRenderPassDescriptor *pass = [MTLRenderPassDescriptor renderPassDescriptor];
			pass.colorAttachments[0].clearColor = color;
			pass.colorAttachments[0].loadAction  = MTLLoadActionClear;
			pass.colorAttachments[0].storeAction = MTLStoreActionStore;
			pass.colorAttachments[0].texture = surface.texture;

			id<MTLCommandBuffer> buffer = [queue commandBuffer];
			id<MTLRenderCommandEncoder> encoder = [buffer renderCommandEncoderWithDescriptor:pass];
			[encoder endEncoding];
			[buffer presentDrawable:surface];
			[buffer commit];
		}

		velocity.x *= drag;
		velocity.y *= drag;
		velocity.z *= drag;

		position.x += delta * velocity.x;
		position.y += delta * velocity.y;
		position.z += delta * velocity.z;

		//const int32_t sleep = ms_delay_per_frame - ((int32_t) SDL_GetTicks() - (int32_t) start);
		//if (sleep > 0) SDL_Delay((uint32_t) sleep);

		delta = (float) ((int32_t) SDL_GetTicks() - (int32_t) start);

		if (counter == 200) counter = 0;
		else counter++;

		if (counter == 0) {
			double fps = 1 / ((double) (SDL_GetTicks() - start) / 1000.0);
			printf("fps = %10.10lf\n", fps);
		}

		if (debug) {
			printf("DEBUG: [%s]\n", tab ? "tab" : "   ");
			printf("position = {%3.3lf, %3.3lf, %3.3lf}\n", (double)position.x,(double)position.y,(double)position.z);
			printf("velocity = {%3.3lf, %3.3lf, %3.3lf}\n", (double)velocity.x,(double)velocity.y,(double)velocity.z);
			printf("yaw = %3.3lf, pitch = %3.3lf\n", (double)yaw, (double)pitch);
			printf("forward = {%3.3lf, %3.3lf, %3.3lf}\n", (double)forward.x,(double)forward.y,(double)forward.z);
			printf("right = {%3.3lf, %3.3lf, %3.3lf}\n", (double)right.x,(double)right.y,(double)right.z);
			printf("up = {%3.3lf, %3.3lf, %3.3lf}\n", (double)up.x,(double)up.y,(double)up.z);
		}	
	}

	SDL_DestroyRenderer(renderer);
	SDL_DestroyWindow(window);
	SDL_Quit();
}













	

	/// next step is to get a triangle rendering!

	// https://developer.apple.com/documentation/metal/using_a_render_pipeline_to_render_primitives

	// gunna use this tutorial! 

	// now i think i am going to code up the viz util   using just sdl2, 
	// because metal doesnt give us much here, for what we want to do in that util. 






////////////////////////////////////////////////////////











/*
























//
// cc sdl-metal-example.m `sdl2-config --cflags --libs` -framework Metal -framework QuartzCore && ./a.out
//
#include <SDL.h>
#import <Metal/Metal.h>
#import <QuartzCore/CAMetalLayer.h>

int main (int argc, char *args[])
{
    SDL_SetHint(SDL_HINT_RENDER_DRIVER, "metal");
    SDL_InitSubSystem(SDL_INIT_VIDEO);
    SDL_Window *window = SDL_CreateWindow("SDL Metal", -1, -1, 640, 480, SDL_WINDOW_ALLOW_HIGHDPI);
    SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_PRESENTVSYNC);
    const CAMetalLayer *swapchain = (__bridge CAMetalLayer *)SDL_RenderGetMetalLayer(renderer);
    const id<MTLDevice> gpu = swapchain.device;
    const id<MTLCommandQueue> queue = [gpu newCommandQueue];

    MTLClearColor color = MTLClearColorMake(0, 0, 0, 1);
    bool quit = false;
    SDL_Event e;

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            switch (e.type) {
                case SDL_QUIT: quit = true; break;
            }
        }

        @autoreleasepool {
            id<CAMetalDrawable> surface = [swapchain nextDrawable];

            color.red = (color.red > 1.0) ? 0 : color.red + 0.01;

            MTLRenderPassDescriptor *pass = [MTLRenderPassDescriptor renderPassDescriptor];
            pass.colorAttachments[0].clearColor = color;
            pass.colorAttachments[0].loadAction  = MTLLoadActionClear;
            pass.colorAttachments[0].storeAction = MTLStoreActionStore;
            pass.colorAttachments[0].texture = surface.texture;

            id<MTLCommandBuffer> buffer = [queue commandBuffer];
            id<MTLRenderCommandEncoder> encoder = [buffer renderCommandEncoderWithDescriptor:pass];
            [encoder endEncoding];
            [buffer presentDrawable:surface];
            [buffer commit];
        }
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}














static const char* vertex_shader_code = "        			\n\
#version 120	  	     						\n\
									\n\
attribute vec3 position;                                		\n\
attribute vec2 input_uv;                               			\n\
									\n\
varying vec2 output_uv;							\n\
uniform mat4 matrix;							\n\
                                          				\n\
void main() {                                				\n\
	gl_Position = matrix * vec4(position, 1.0);              	\n\
	output_uv = input_uv;                           		\n\
}                                                       		\n";

static const char* fragment_shader_code = "				\n\
#version 120								\n\
									\n\
varying vec2 output_uv;							\n\
uniform sampler2D atlas_texture;					\n\
									\n\
void main() {								\n\
//	gl_FragColor.rbg = texture2D(atlas_texture, output_uv).rbg;	\n\
	gl_FragColor.rbg = vec3(output_uv, 0.0);			\n\
	gl_FragColor.a = 1.0;						\n\
}									\n";




*/



































	//printf("info: pushed %u verticies. (as %u floats)", vertex_count, raw_count);

	//getchar();
/*
	const float e = 0.5;// 8.0f / 64.0f;
	const float b = 0;

	int x = 0, y = 0, z = 0;

	push_vertex(0,0,0, b,b);
	push_vertex(0,1,0, e,b);
	push_vertex(1,0,0, b,e);
	push_vertex(1,1,0, e,e);
	push_vertex(1,0,0, b,e);
	push_vertex(0,1,0, e,b);
*/


// vertex_count += 6;



/*
	push_vertex(0,0,1, b,b);
	push_vertex(1,0,1, e,b);
	push_vertex(0,1,1, b,e);
	push_vertex(1,1,1, e,e);
	push_vertex(0,1,1, b,e);
	push_vertex(1,0,1, e,b);

	push_vertex(1,1,1, b,b);
	push_vertex(1,0,1, e,b);
	push_vertex(1,1,0, b,e);
	push_vertex(1,0,0, e,e);
	push_vertex(1,1,0, b,b);
	push_vertex(1,0,1, e,b);

*/




/*
	x = 1; y = 1; z = 1;

	push_vertex(0,0,0, b,b);
	push_vertex(0,1,0, e,b);
	push_vertex(1,0,0, b,e);
	push_vertex(1,1,0, e,e);
	push_vertex(1,0,0, b,e);
	push_vertex(0,1,0, e,b);
*/



/*
	push_vertex(0,0,1, b,b);
	push_vertex(1,0,1, e,b);
	push_vertex(0,1,1, b,e);
	push_vertex(1,1,1, e,e);
	push_vertex(0,1,1, b,e);
	push_vertex(1,0,1, e,b);

	push_vertex(1,1,1, b,b);
	push_vertex(1,0,1, e,b);
	push_vertex(1,1,0, b,e);
	push_vertex(1,0,0, e,e);
	push_vertex(1,1,0, b,b);
	push_vertex(1,0,1, e,b);
*/
	
















/*glTexSubImage2D(
				GL_TEXTURE_2D_ARRAY, 0, 0, 0, 
				x * 8 + y, p_dx, p_dy, 1, 
				GL_RGBA, GL_UNSIGNED_BYTE, 
				pixel_bytes + (x * p_dy * 8 + y * p_dx) * 4
			);
			cc;
	
	for (int x = 0; x < 8; x++) {
		for (int y = 0; y < 8; y++) {

			// glTexSubImage3D(...);
			// cc;

			// example usage:

			 glTexSubImage3D(
				GL_TEXTURE_2D_ARRAY, 
				0, 0, 0, 
				x * 8 + y, 
				8, 8, 
				1, 
				GL_RBGA, 
				GL_UNSIGNED_BYTE, 
				mat->pixels + (x * 64 + y * 8) * 4
			);

			
		}
	}

*/





//	int p_dx = 64 / 8; // pixels of each tile in x
//	int p_dy = 64 / 8; // pixels of each tile in y
	// int tiles = 8 * 8; // number of tiles total
	
	
	//glTexStorage3D(GL_TEXTURE_2D_ARRAY, 1, GL_RGBA32F, p_dx, p_dy, tiles); 
	//cc;
	
//	glPixelStorei(GL_UNPACK_ROW_LENGTH, 64); // width
//	cc;

//	glPixelStorei(GL_UNPACK_IMAGE_HEIGHT, 64); // height
//	cc;
	
/*	for (int x = 0; x < 8; x++) {
		for (int y = 0; y < 8; y++) {

			

			glTexSubImage2D(GL_TEXTURE_2D, 0, 
					x * 8, y * 8,
					8, 8,
					GL_RGBA,
					GL_UNSIGNED_BYTE,
					pixel_bytes
			);

			cc;


			// i think i may have figured out whats happening. it has to do with x and y. 
		}

	}

*/









/*


	so we are currently trying to solve the problem of:


	p0	1. the view of the world needs to regenerate and delete itself, 
			something like chunk loading, as we move around, ie, the view 
			window of the player needs to adapt and the world has to be wrap around, 
			server side!


	p1	2. we need to figure out the rotation of the player...
	
	p2	3.      we need to add a brain, and have the players key strokes cause brain signals to be issued to nearby nerves.

	p3	4.    we need to optimize the voxel renderer  more i think     yeah... 



*/









/*
        TODO:
 -----------------------------

2  	- research  simple voxel lighting without using normal vectors lol.


3  	- research rendering optimizations.


1	- code up the world generation, using 2d-wrap-around (modulo behavior) perlin noise.


3	- figure out how to render transluscent voxels. (for like, water, and gases, etc)





	DONE:
---------------------------------


x	- remove the simple dumb player physics that we implemented?

x	- remove the mouse button pressing code.  its just not neccessary. 




x	- research whether doing matrix mul is faster on gpu.

x	- why is the camera acceleratio so small?


x	- code up the ray casting algorithm, for placing and breaking blocks. really easy.

x					...nor is the code for doing ray casting. its just not necc.
								wow

*/








































































#include <simd/simd.h>

enum AAPLVertexInputIndex {
    AAPLVertexInputIndexVertices     = 0,
    AAPLVertexInputIndexViewportSize = 1,
};

struct AAPLVertex {
    vector_float2 position;
    vector_float4 color;
};


#include <Foundation/Foundation.hpp>
#include <Metal/Metal.hpp>
#include <Metal/shared_ptr.hpp>
#include <QuartzCore/QuartzCore.hpp>
#include <SDL.h>
#include <iostream>

namespace {
#include "triangle_metallib.h"
}

const AAPLVertex triangleVertices[] = {
    // 2D positions,    RGBA colors
    { {  250,  -250 }, { 1, 0, 0, 1 } },
    { { -250,  -250 }, { 0, 1, 0, 1 } },
    { {    0,   250 }, { 0, 0, 1, 1 } },
};

const vector_uint2 viewport = { 640, 480 };

int main(int argc, char **argv) {
    SDL_SetHint(SDL_HINT_RENDER_DRIVER, "metal");
    SDL_InitSubSystem(SDL_INIT_VIDEO);
    SDL_Window *window = SDL_CreateWindow("SDL Metal", -1, -1, viewport[0], viewport[1], SDL_WINDOW_ALLOW_HIGHDPI);
    SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_PRESENTVSYNC);

    NS::Error *err;

    auto swapchain = (CA::MetalLayer*)SDL_RenderGetMetalLayer(renderer);
    auto device = swapchain->device();

    auto name = device->name();
    std::cerr << "device name: " << name->utf8String() << std::endl;

    auto library_data = dispatch_data_create(
        &triangle_metallib[0], triangle_metallib_len,
        dispatch_get_main_queue(),
        ^{ });

    auto library = MTL::make_owned(device->newLibrary(library_data, &err));

    if (!library) {
        std::cerr << "Failed to create library" << std::endl;
        std::exit(-1);
    }

    auto vertex_function_name = NS::String::string("vertexShader", NS::ASCIIStringEncoding);
    auto vertex_function = MTL::make_owned(library->newFunction(vertex_function_name));

    auto fragment_function_name = NS::String::string("fragmentShader", NS::ASCIIStringEncoding);
    auto fragment_function = MTL::make_owned(library->newFunction(fragment_function_name));

    auto pipeline_descriptor = MTL::make_owned(MTL::RenderPipelineDescriptor::alloc()->init());
    pipeline_descriptor->setVertexFunction(vertex_function.get());
    pipeline_descriptor->setFragmentFunction(fragment_function.get());

    auto color_attachment_descriptor = pipeline_descriptor->colorAttachments()->object(0);
    color_attachment_descriptor->setPixelFormat(swapchain->pixelFormat());

    auto pipeline = MTL::make_owned(device->newRenderPipelineState(pipeline_descriptor.get(), &err));

    if (!pipeline) {
        std::cerr << "Failed to create pipeline" << std::endl;
        std::exit(-1);
    }

    auto queue = MTL::make_owned(device->newCommandQueue());

    bool quit = false;
    SDL_Event e;

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            switch (e.type) {
                case SDL_QUIT: {
                    quit = true;
                } break;
            }
        }

        auto drawable = swapchain->nextDrawable();

        auto pass = MTL::make_owned(MTL::RenderPassDescriptor::renderPassDescriptor());

        auto color_attachment = pass->colorAttachments()->object(0);
        color_attachment->setLoadAction(MTL::LoadAction::LoadActionClear);
        color_attachment->setStoreAction(MTL::StoreAction::StoreActionStore);
        color_attachment->setTexture(drawable->texture());

        //
        auto buffer = MTL::make_owned(queue->commandBuffer());

        //
        auto encoder = MTL::make_owned(buffer->renderCommandEncoder(pass.get()));

        encoder->setViewport(MTL::Viewport {
            0.0f, 0.0f,
            (double)viewport[0], (double)viewport[1],
            0.0f, 1.0f
         });

        encoder->setRenderPipelineState(pipeline.get());

        encoder->setVertexBytes(&triangleVertices[0], sizeof(triangleVertices), AAPLVertexInputIndexVertices);
        encoder->setVertexBytes(&viewport, sizeof(viewport), AAPLVertexInputIndexViewportSize);

        NS::UInteger vertex_start = 0, vertex_count = 3;
        encoder->drawPrimitives(MTL::PrimitiveType::PrimitiveTypeTriangle, vertex_start, vertex_count);

        encoder->endEncoding();

        buffer->presentDrawable(drawable);
        buffer->commit();

        drawable->release();
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

}















































#include <metal_stdlib>
#include <simd/simd.h>

enum AAPLVertexInputIndex {
    AAPLVertexInputIndexVertices     = 0,
    AAPLVertexInputIndexViewportSize = 1,
};

struct AAPLVertex {
    vector_float2 position;
    vector_float4 color;
};

using namespace metal;


// Vertex shader outputs and fragment shader inputs
struct RasterizerData
{
    // The [[position]] attribute of this member indicates that this value
    // is the clip space position of the vertex when this structure is
    // returned from the vertex function.
    float4 position [[position]];

    // Since this member does not have a special attribute, the rasterizer
    // interpolates its value with the values of the other triangle vertices
    // and then passes the interpolated value to the fragment shader for each
    // fragment in the triangle.
    float4 color;
};

vertex RasterizerData
vertexShader(uint vertexID [[vertex_id]],
             constant AAPLVertex *vertices [[buffer(AAPLVertexInputIndexVertices)]],
             constant vector_uint2 *viewportSizePointer [[buffer(AAPLVertexInputIndexViewportSize)]])
{
    RasterizerData out;

    // Index into the array of positions to get the current vertex.
    // The positions are specified in pixel dimensions (i.e. a value of 100
    // is 100 pixels from the origin).
    float2 pixelSpacePosition = vertices[vertexID].position.xy;

    // Get the viewport size and cast to float.
    vector_float2 viewportSize = vector_float2(*viewportSizePointer);


    // To convert from positions in pixel space to positions in clip-space,
    //  divide the pixel coordinates by half the size of the viewport.
    out.position = vector_float4(0.0, 0.0, 0.0, 1.0);
    out.position.xy = pixelSpacePosition / (viewportSize / 2.0);

    // Pass the input color directly to the rasterizer.
    out.color = vertices[vertexID].color;

    return out;
}

fragment float4 fragmentShader(RasterizerData in [[stage_in]])
{
    // Return the interpolated color.
    return in.color;
}




















































